{"version":3,"sources":["Component/Card.js","Component/ErrorBoundries.js","Services/App.js","serviceWorker.js","index.js"],"names":["Card","datas","className","map","data","index","class","id","key","type","toUpperCase","number","text","ErrorBoundries","state","gotIssue","this","setSate","props","children","React","Component","App","getData","fetchData","setState","onNumberChange","event","target","value","numberData","Promise","all","url","fetch","then","response","json","placeholder","onChange","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kSAyBeA,G,YArBF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACX,OACI,yBAAKC,UAAU,OAEPD,EAAME,KAAK,SAACC,EAAMC,GACd,OACI,6BAASC,MAAM,+BAA+BC,GAAG,OAAOC,IAAKH,GACzD,wBAAIE,GAAG,YAAYD,MAAM,wBAAwBF,EAAKK,KAAKC,cAA3D,OAA8EN,EAAKO,QACnF,yBAAKL,MAAM,UACP,uBAAGA,MAAM,UACRF,EAAKQ,cCKvBC,E,kDAdX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,gEAOVC,KAAKC,QAAQ,CAACF,UAAU,M,+BAGxB,OAAOC,KAAKF,MAAMC,SAAW,yDAAqCC,KAAKE,MAAMC,a,GAXxDC,IAAMC,WCiEpBC,E,kDA7Db,aAAe,IAAD,8BACZ,gBAwBJC,QAAU,WACV,EAAKC,YACL,EAAKC,SAAS,CAACd,OAAQ,MA3BP,EA+BhBe,eAAiB,SAACC,GAChB,EAAKF,SAAS,CAACd,OAA+B,KAAvBgB,EAAMC,OAAOC,MAAe,SAAWF,EAAMC,OAAOC,SA9BzE,EAAKf,MAAQ,CACXH,OAAQ,IACRmB,WAAY,IAJF,E,wDAQD,IAAD,OACVC,QAAQC,IAAI,CAAC,yBAAD,OACqC,KAAtBhB,KAAKF,MAAMH,OAAgB,SAAWK,KAAKF,MAAMH,OADhE,8CAEqC,KAAtBK,KAAKF,MAAMH,OAAgB,SAAWK,KAAKF,MAAMH,OAFhE,8CAGqC,KAAtBK,KAAKF,MAAMH,OAAgB,SAAWK,KAAKF,MAAMH,OAHhE,8CAIqC,KAAtBK,KAAKF,MAAMH,OAAgB,SAAWK,KAAKF,MAAMH,OAJhE,iBAKVR,KAAI,SAAA8B,GAAG,OACPC,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,cAClCF,MAAK,SAAAlC,GACN,OAAO,EAAKwB,SAAS,CAACK,WAAY7B,S,0CAKxCe,KAAKQ,c,+BAcH,OACE,yBAAKtB,UAAU,MACb,yBAAKK,GAAG,WACN,6CAEF,yBAAKL,UAAU,OACX,2BAAOA,UAAU,oCACjBoC,YAAY,yBACZT,MAAOb,KAAKF,MAAMH,OAClB4B,SAAUvB,KAAKU,eACfjB,KAAK,UAET,yBAAKF,GAAG,UACR,uBAAGD,MAAM,8DAA8DkC,KAAK,KAAKC,QAASzB,KAAKO,SAA/F,cAEE,yBAAKrB,UAAU,6BAA6BK,GAAG,SAC7C,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAMN,MAAOe,KAAKF,MAAMgB,oB,GAtDnBV,IAAMC,WCKJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7c319ef1.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = ({datas}) => {\r\n    return (\r\n        <div className=\"ma2\">\r\n            {\r\n                datas.map( (data, index) => {\r\n                    return (\r\n                        <article class=\"tc dib br3 ma2 grow shadow-5\" id=\"card\" key={index}>\r\n                            <h1 id=\"stckyhead\" class=\"f3 white mv0 pv2 ph3\">{data.type.toUpperCase()} of {data.number}</h1>\r\n                            <div class=\"pa3 bt\">\r\n                                <p class=\"f4 mv0\">\r\n                                {data.text}\r\n                                </p>\r\n                            </div>\r\n                        </article>\r\n                    )\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react';\r\n\r\n\r\n\r\nclass ErrorBoundries extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            gotIssue: false\r\n        }\r\n    }\r\n    componentDidCatch() {\r\n        this.setSate({gotIssue: true})\r\n    }\r\n    render() {\r\n        return this.state.gotIssue ? <h1>Opps Something went wrong</h1> : this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundries;","import React from 'react';\nimport './App.css';\nimport Card from '../Component/Card';\nimport ErrorBoundries from '../Component/ErrorBoundries'\n\n\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {  \n      number: '1',\n      numberData: []\n    }\n  }\n\n  fetchData() {\n    Promise.all([\n      `http://numbersapi.com/${this.state.number === '' ? 'random' : this.state.number}/year?json`,\n      `http://numbersapi.com/${this.state.number === '' ? 'random' : this.state.number}/math?json`,\n      `http://numbersapi.com/${this.state.number === '' ? 'random' : this.state.number}/date?json`,\n      `http://numbersapi.com/${this.state.number === '' ? 'random' : this.state.number}/trivia?json`\n    ].map(url => \n      fetch(url).then(response => response.json())\n      )).then(datas => {\n        return this.setState({numberData: datas});\n      });\n  }\n\ncomponentDidMount() {\n  this.fetchData();\n}\n\ngetData = () => {\nthis.fetchData();\nthis.setState({number: ''})\n\n}\n\nonNumberChange = (event) => {\n  this.setState({number: event.target.value === '' ? 'random' : event.target.value});\n}\n  \n  render() {\n    return (\n      <div className=\"tc\">\n        <div id=\"heading\">\n          <h1>Number Facts</h1>\n        </div>\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-white'\n            placeholder='Enter number or random'\n            value={this.state.number}\n            onChange={this.onNumberChange}\n            type=\"text\"/>\n        </div>\n        <div id=\"Buttun\">\n        <a class=\"f6 grow no-underline br-pill ph4 pv2 ma2 dib white bg-black\" href=\"#0\" onClick={this.getData}>Get Facts</a>\n        </div>\n          <div className=\"center mv4 pa2 w-90 br3 ba\" id=\"cards\">\n            <ErrorBoundries>\n             <Card datas={this.state.numberData}/>\n          </ErrorBoundries>\n          </div>\n      </div>\n    );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Services/App';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}